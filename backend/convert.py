import os
import subprocess
import tempfile
from music21 import converter
import sys

def convert_to_midi(input_path):
    # Step 1: Prepare output folder
    output_dir = "outputs"
    os.makedirs(output_dir, exist_ok=True)

    # Step 2: Set environment to disable GPU (this is the key fix)
    env = os.environ.copy()
    env["ORT_DISABLE_GPU"] = "1"
    env["CUDA_VISIBLE_DEVICES"] = ""
    env["OMP_NUM_THREADS"] = "1"
    # Force ONNX Runtime to use CPU only
    env["ORT_DISABLE_ALL_PROVIDERS_EXCEPT_CPU"] = "1"

    # Step 3: Try to run Oemer directly with proper error handling
    try:
        # First, try to import and run oemer directly
        print("Attempting to run Oemer...")
        
        # Set environment variables before importing
        os.environ['ORT_DISABLE_GPU'] = '1'
        os.environ['CUDA_VISIBLE_DEVICES'] = ''
        os.environ['OMP_NUM_THREADS'] = '1'
        os.environ['ORT_DISABLE_ALL_PROVIDERS_EXCEPT_CPU'] = '1'
        
        # Run oemer command
        cmd = ["python", "-m", "oemer", input_path, "-o", output_dir]
        print(f"Running command: {' '.join(cmd)}")
        
        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            env=env,
            timeout=300  # 5 minute timeout
        )
        
        print(f"Oemer return code: {result.returncode}")
        if result.stdout:
            print(f"Oemer stdout: {result.stdout}")
        if result.stderr:
            print(f"Oemer stderr: {result.stderr}")
        
        if result.returncode != 0:
            error_msg = f"Oemer failed with return code {result.returncode}"
            if result.stderr:
                error_msg += f": {result.stderr}"
            if result.stdout:
                error_msg += f" | stdout: {result.stdout}"
            raise RuntimeError(error_msg)

    except subprocess.TimeoutExpired:
        raise RuntimeError("Oemer process timed out after 5 minutes")
    except Exception as e:
        print(f"Error running Oemer: {e}")
        raise RuntimeError(f"Oemer failed: {e}")

    # Step 4: Locate the generated MusicXML file
    musicxml_path = None
    print(f"Looking for MusicXML files in {output_dir}")
    
    if not os.path.exists(output_dir):
        raise FileNotFoundError(f"Output directory {output_dir} does not exist")
    
    files_in_output = os.listdir(output_dir)
    print(f"Files in output directory: {files_in_output}")
    
    for file in files_in_output:
        if file.endswith(".musicxml"):
            musicxml_path = os.path.join(output_dir, file)
            print(f"Found MusicXML file: {musicxml_path}")
            break

    if not musicxml_path:
        raise FileNotFoundError(f"No MusicXML file generated by Oemer. Files found: {files_in_output}")

    # Step 5: Convert MusicXML to MIDI
    try:
        print(f"Converting {musicxml_path} to MIDI...")
        score = converter.parse(musicxml_path)
        midi_path = musicxml_path.replace(".musicxml", ".mid")
        score.write('midi', fp=midi_path)
        print(f"MIDI file created: {midi_path}")
        return midi_path
    except Exception as e:
        print(f"Error converting to MIDI: {e}")
        raise RuntimeError(f"Failed to convert MusicXML to MIDI: {e}")
